(load "tl/match")
(let ()
  (write (match-expr 'x '( ((? symbol?) (write :is-a-symbol!)))))(display)

  (define (t1 d)
    (write (list 't1 d))(display " => ")
    (match d
      (`(1 2 3)   (write (list :matched!)))
      (`(1 ,a 3)  (write (list :matched! :a a)))
      (`(1 ,a ,c) (write (list :matched! :a a :c c)))
      )
    (newline)
    )
  (t1 '())
  (t1 '(1))
  (t1 '(1 2))
  (t1 '(1 2 3))
  (t1 '(1 x 3))
  (t1 '(1 x y))
  (define (t2 d)
    (write (list 't2 d))(display " => ")
    (match d
      (`(1 (2 3) 4)     (write (list :matched!)))
      (`(1 (2 ,bb) 5)   (write (list :matched! :bb bb)))
      (`(1 (2 3) ,c)    (write (list :matched! :c c)))
      (`(1 ,b ,c)       (write (list :matched! :b b :c c)))
      (`(2 ,@r)         (write (list :matched! :r r)))
      ((? string?)      (write (list :string?)))
      ((? symbol?)      (write (list :symbol?)))
      )
    (newline)
    )
  (t2 '())
  (t2 '(1))
  (t2 '(1 2 4))
  (t2 '(1 (2 3) 4))
  (t2 '(1 (2 3) 5))
  (t2 '(1 (2 3) 6))
  (t2 '(1 (2 3) "foo"))
  (t2 '(1 (4 3) 4))
  (t2 '(2 3 4 5))
  (t2 "foo")
  (t2 'a-symbol)
)
'ok
