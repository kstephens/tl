(load "map.scm")

(define *compiler-define-trace* #f)
(define *compiler-expand-trace* #f)
(define <compiler> (make-type "compiler"))
(let ((id 0))
  (define (compiler-new)
    (set! id (+ id 1))
    ;; (tl_set_type 
    (vector '<struct> #f #f id #f (map-new) (map-new))
    ;; <vector>) ;; fixme
    ))
(define (compiler-id self) (vector-ref self 3))
(define (compiler-stream self) (vector-ref self 4))
(define (compiler-stream= self v) (vector-set! self 4 v))
(define (compiler-emit self str)
  (display str (compiler-stream self)))
(define (compiler-emit-constant self e)
  (fprintf (->FILE* (compiler-stream self))) "%p" e))
(define (compiler-expr self e)
  (compiler-emit self "(")
  (compiler-emit-1 self e)
  (compiler-emit self ")")
  )
(define (compiler-stmt self e c)
  (compiler-expr-1 self e c))
(define (compiler-expr-1 self e c)
  (if (pair? e)
    (let ((head (car e)) (args (cdr e)))
      (cond
        ((eq? head 'quote)
          (compiler-emit-constant self e))
        ((eq? head 'begin)
          (let* ((rargs (reverse args))
                  (stmt1 (car rargs))
                  (stmtn (reverse (cdr rargs))))
            (compiler-emit self "{")
            (map (lambda (stmt) 
                   (compiler-stmt self stmt nil)
                   (compiler-emit self ";")
                   ) stmtn)
            (compiler-stmt self stmt1 c))
            (compiler-emit self "}")
          )
          (map 
            (lambda (stmt) 
              (compiler-stmt e)
        ((eq? head 'if)
          (c (lambda ()
               (compiler-emit self "(")
               (compiler-expr self (car args))
               (compiler-emit self " != ")
               (compiler-expr self #f)
               (compiler-emit self ") ? ")
               (compiler-expr self (cadr args))
               (compiler-emit self " : ")
               (compiler-expr self (caddr args))
               )
          )
    (else
      (compiler-emit-constant self e))
    ))

