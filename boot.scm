(define *env* &env)
(define &eos eos)
(define eos? (lambda (x) (eq? x &eos)))
(define eq? tl_eqQ)
(define eqv? tl_eqvQ)
(define car tl_car)
(define cdr tl_cdr)
(define cons tl_cons)
(define eval tl_eval)
(define repl tl_repl)
(define + tl_fixnum_ADD)
(define - tl_fixnum_SUB)
(define * tl_fixnum_MUL)
(define / tl_fixnum_DIV)

(define null? (lambda (x) (eq? x '())))
(define display (lambda (obj . port)
  (tl__write obj (if (null? port) _stdout (car port)) '())))
(define write (lambda (obj . port)
  (tl__write obj (if (null? port) _stdout (car port)) #t)))
(define newline (lambda port)
  (fputc (tl_I 10) (if (null? port) _stdout (car port)))
  #t)
(define read (lambda port
  (tl_read (if (null? port) _stdin (car port)))))

