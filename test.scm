(quote a)
(car '(a b))
(cdr '(a b))
(cons 'a 'b)
((lambda (a b)
  (car a)
  (cdr b)
  (cons a b))
  '(1 2) '(3 4))
(if #t 'true 'false)
(if #f 'true 'false)
(if #t 'true)
(if #f 'true)

(define *env* &env)
(define eos? (lambda (x) (eq? x &eos)))
(define null? (lambda (x) (eq? x '())))
(define display (lambda (obj . port)
  (%write obj (if (null? port) stdout (car port)) '())))
(define write (lambda (obj . port)
  (%write obj (if (null? port) stdout (car port)) #t)))
(define newline (lambda port)
  (%newline (if (null? port) stdout (car port))))
(define read (lambda port
  (%read (if (null? port) stdin (car port)))))

(define a (lambda () 
            (display "a")(newline)
            (b)))
(define b (lambda ()
            (display "b")(newline)
            (a)))
(a)
