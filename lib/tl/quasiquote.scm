(define *quasiquote-debug* #f)
(define &quasiquote
  (let ((qq-list #f) (qq-element #f) (qq-object #f))
    (set! qq-list (lambda (l)
                    (if (pair? l)
                      (let ((obj (car l)))
                        (if (pair? obj) 
                          (if (eq? (car obj) 'unquote-splicing)
                            (if (cdr l)
                              (list 'append (cadr obj) (qq-list (cdr l)))
                              (cadr obj))
                            (list 'cons (qq-object obj) (qq-list (cdr l))))
                          (list 'cons (qq-object obj) (qq-list (cdr l)))))
                      (list 'quote l))))
    (set! qq-element (lambda (l)
                       (let ((head (car l)))
                         (if (eq? head 'unquote)
                           (cadr l)
                           (qq-list l)))))
    (set! qq-object (lambda (object)
                      (if (pair? object)
                        (qq-element object)
                        (list 'quote object))))
    (lambda (expr)
      (if *quasiquote-debug*
        (begin (display "qq-object ")(write expr)(newline)))
      (let ((result (qq-object expr)))
        (if *quasiquote-debug*
          (begin (display "  => ")(write result)(newline)))
        result))
    ))


