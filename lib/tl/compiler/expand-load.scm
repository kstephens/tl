(load "read-list.scm")
(define (expand-load expr load-path)
  (define (begin? expr) (and (pair? expr) (eq? 'begin (car expr))))
  (define (begin-simplify expr)
    (cond
      ((not (begin? expr))  expr)
      ((null? (cdr expr))   (if #f #t))
      ((null? (cddr expr))  (begin-simplify (cadr expr)))
      (else                 `(begin ,@(map begin-simplify (cdr expr))))))
  (define (begin-flatten-exprs exprs result)
    (if (null? exprs) result
      (let ((expr (car exprs)))
        (if (begin? expr) 
          (begin-flatten-exprs (cdr exprs) (begin-flatten-exprs (cdr expr) result))
          (begin-flatten-exprs (cdr exprs) (append result (list expr)))))))
  (define (begin-flatten expr)
    (cond
      ((begin? expr)  `(begin ,@(begin-flatten-exprs (cdr expr) '())))
      (else           expr)))
  (define (load? expr)  (and (pair? expr) (eq? 'load  (car expr)) (string? (cadr expr))))
  (define (expand-load-expr expr load-path current-file)
    (if (load? expr)
      (let ((name (cadr expr)))
        (let ((file (load-locate-file name load-path current-file)))
          (if (not file) (error "expand-load: cannot locate" 'name name))
          `(begin ,@(expand-load-list (read-list (open-file file "r")) load-path file))))
        expr))
  (define (expand-load-list list load-path current-file)
    (if (null? list) list
      (cons (expand-load-expr (car list) load-path current-file)
            (expand-load-list (cdr list) load-path current-file))))
  (if (not load-path) (set! load-path *load-path*))
  (begin-flatten
    (if (begin? expr)
      `(begin ,@(expand-load-list (cdr expr) load-path #f))
      (expand-load-expr expr load-path #f)))
  )
